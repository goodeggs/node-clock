// Generated by CoffeeScript 1.6.3
(function() {
  var clock, tz, tzWithId, tzids, validTzids, zoneData,
    __slice = [].slice;

  zoneData = [require('timezone/America/Los_Angeles'), require('timezone/America/Denver'), require('timezone/America/Chicago'), require('timezone/America/New_York')];

  tzids = ['UTC'];

  validTzids = {
    'UTC': true
  };

  (function() {
    var data, name, zone, _i, _len, _ref;
    for (_i = 0, _len = zoneData.length; _i < _len; _i++) {
      zone = zoneData[_i];
      _ref = zone.zones;
      for (name in _ref) {
        data = _ref[name];
        tzids.push(name);
        validTzids[name] = true;
      }
    }
    return null;
  })();

  tz = require('timezone')(zoneData);

  tzWithId = function(tzid) {
    var timezone;
    timezone = tz(tzid);
    timezone.tzid = tzid;
    return timezone;
  };

  module.exports = clock = {
    tzids: tzids,
    now: function() {
      return Date.now();
    },
    tz: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (validTzids[args[args.length - 1]] == null) {
        throw new Error('You must specify a valid tzid');
      }
      return tz.apply(null, args);
    },
    utc: tzWithId('UTC'),
    pacific: tzWithId('America/Los_Angeles'),
    mountain: tzWithId('America/Denver'),
    central: tzWithId('America/Chicago'),
    eastern: tzWithId('America/New_York'),
    extendNumber: function() {
      var multiplier, subunit, unit, _fn, _i, _len, _ref, _ref1;
      if (Number.prototype.milliseconds == null) {
        _ref = [['millisecond', 1], ['second', 1000, 'milliseconds'], ['minute', 60, 'seconds'], ['hour', 60, 'minutes'], ['day', 24, 'hours'], ['week', 7, 'days']];
        _fn = function(unit, multiplier, subunit) {
          var prop, subunitCount, _j, _len1, _ref1, _results;
          subunitCount = subunit != null ? multiplier[subunit]() : multiplier;
          _ref1 = [unit, unit + 's'];
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            prop = _ref1[_j];
            _results.push((function(prop) {
              return Number.prototype[prop] = function() {
                return this * subunitCount;
              };
            })(prop));
          }
          return _results;
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], unit = _ref1[0], multiplier = _ref1[1], subunit = _ref1[2];
          _fn(unit, multiplier, subunit);
        }
        return Number.prototype.ago = function() {
          return clock.now() - this;
        };
      }
    }
  };

}).call(this);
